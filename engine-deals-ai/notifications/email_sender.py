import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, List
import json

class EmailNotifier:
    def __init__(self, config):
        self.config = config
        self.smtp_server = config.EMAIL_SMTP_SERVER
        self.smtp_port = config.EMAIL_PORT
        self.username = config.EMAIL_USERNAME
        self.password = config.EMAIL_PASSWORD
        self.notification_email = config.NOTIFICATION_EMAIL
        self.logger = logging.getLogger(self.__class__.__name__)
    
    def send_hot_deal_alert(self, listing: Dict) -> bool:
        """Send hot deal alert via email"""
        if not self._is_configured():
            self.logger.warning("Email not properly configured")
            return False
        
        try:
            subject = f"üî• Hot Engine Deal: {listing.get('title', 'Unknown')[:50]}"
            body = self._create_deal_email_body(listing)
            
            return self._send_email(subject, body)
            
        except Exception as e:
            self.logger.error(f"Error sending hot deal email: {e}")
            return False
    
    def send_daily_summary(self, hot_deals: List[Dict], total_new_listings: int) -> bool:
        """Send daily summary email"""
        if not self._is_configured():
            return False
        
        try:
            subject = f"üìä Daily Engine Deals Summary - {len(hot_deals)} Hot Deals Found"
            body = self._create_summary_email_body(hot_deals, total_new_listings)
            
            return self._send_email(subject, body)
            
        except Exception as e:
            self.logger.error(f"Error sending daily summary email: {e}")
            return False
    
    def _create_deal_email_body(self, listing: Dict) -> str:
        """Create HTML email body for a deal"""
        title = listing.get('title', 'Unknown Listing')
        price = listing.get('price')
        price_text = f"${price:,.2f}" if price else "Price not listed"
        platform = listing.get('platform', 'Unknown').title()
        location = listing.get('location', 'Not specified')
        seller = listing.get('seller_name', 'Unknown')
        deal_score = listing.get('deal_score', 0)
        url = listing.get('url', '')
        description = listing.get('description', '')
        
        condition_keywords = listing.get('condition_keywords', [])
        if isinstance(condition_keywords, str):
            try:
                condition_keywords = json.loads(condition_keywords)
            except:
                condition_keywords = []
        
        keywords_text = ", ".join(condition_keywords) if condition_keywords else "None detected"
        
        html_body = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .header {{ background-color: #ff6b35; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                .deal-info {{ background-color: #f4f4f4; padding: 15px; margin: 10px 0; border-radius: 5px; }}
                .price {{ font-size: 24px; font-weight: bold; color: #ff6b35; }}
                .score {{ font-size: 18px; font-weight: bold; color: #28a745; }}
                .button {{ background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 10px 0; }}
                .footer {{ background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üî• Hot Engine Deal Alert!</h1>
            </div>
            
            <div class="content">
                <h2>{title}</h2>
                
                <div class="deal-info">
                    <div class="price">üí∞ {price_text}</div>
                    <div class="score">‚≠ê Deal Score: {deal_score:.2f}/1.00</div>
                    <p><strong>üè™ Platform:</strong> {platform}</p>
                    <p><strong>üìç Location:</strong> {location}</p>
                    <p><strong>üë§ Seller:</strong> {seller}</p>
                    <p><strong>üîß Condition Keywords:</strong> {keywords_text}</p>
                </div>
                
                {f'<p><strong>Description:</strong></p><p>{description[:500]}{"..." if len(description) > 500 else ""}</p>' if description else ''}
                
                <a href="{url}" class="button">View Listing</a>
            </div>
            
            <div class="footer">
                <p>This alert was generated by Engine Deals AI</p>
                <p>You're receiving this because a listing scored above {self.config.HOT_DEAL_THRESHOLD} on our deal detection algorithm.</p>
            </div>
        </body>
        </html>
        """
        
        return html_body
    
    def _create_summary_email_body(self, hot_deals: List[Dict], total_new_listings: int) -> str:
        """Create HTML email body for daily summary"""
        html_body = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .header {{ background-color: #28a745; color: white; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                .summary-stats {{ display: flex; justify-content: space-around; margin: 20px 0; }}
                .stat-box {{ background-color: #f8f9fa; padding: 15px; text-align: center; border-radius: 5px; flex: 1; margin: 0 10px; }}
                .stat-number {{ font-size: 24px; font-weight: bold; color: #007bff; }}
                .deal-item {{ background-color: #f4f4f4; padding: 10px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #ff6b35; }}
                .deal-title {{ font-weight: bold; color: #333; }}
                .deal-price {{ color: #ff6b35; font-weight: bold; }}
                .deal-score {{ color: #28a745; font-weight: bold; }}
                .footer {{ background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä Daily Engine Deals Summary</h1>
            </div>
            
            <div class="content">
                <div class="summary-stats">
                    <div class="stat-box">
                        <div class="stat-number">{total_new_listings}</div>
                        <div>New Listings</div>
                    </div>
                    <div class="stat-box">
                        <div class="stat-number">{len(hot_deals)}</div>
                        <div>Hot Deals</div>
                    </div>
                    <div class="stat-box">
                        <div class="stat-number">{len([d for d in hot_deals if d.get('is_lq4', False)])}</div>
                        <div>LQ4 Deals</div>
                    </div>
                </div>
                
                <h2>üèÜ Top Hot Deals</h2>
        """
        
        if hot_deals:
            for i, deal in enumerate(hot_deals[:10], 1):
                title = deal.get('title', 'Unknown')[:60]
                price = f"${deal.get('price', 0):,.2f}" if deal.get('price') else "Price N/A"
                platform = deal.get('platform', 'Unknown').title()
                score = deal.get('deal_score', 0)
                url = deal.get('url', '')
                
                html_body += f"""
                <div class="deal-item">
                    <div class="deal-title">{i}. {title}</div>
                    <div>
                        <span class="deal-price">{price}</span> | 
                        <span class="deal-score">Score: {score:.2f}</span> | 
                        Platform: {platform}
                    </div>
                    <a href="{url}" style="color: #007bff; text-decoration: none;">View Listing ‚Üí</a>
                </div>
                """
        else:
            html_body += "<p>No hot deals found today. The algorithm is still learning!</p>"
        
        html_body += """
            </div>
            
            <div class="footer">
                <p>This summary was generated by Engine Deals AI</p>
                <p>Hot deals are listings that score above our threshold based on price, condition, and relevance to your preferences.</p>
            </div>
        </body>
        </html>
        """
        
        return html_body
    
    def _send_email(self, subject: str, body: str) -> bool:
        """Send email using SMTP"""
        try:
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = self.username
            msg['To'] = self.notification_email
            
            html_part = MIMEText(body, 'html')
            msg.attach(html_part)
            
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.username, self.password)
                server.send_message(msg)
            
            self.logger.info(f"Email sent successfully: {subject}")
            return True
            
        except Exception as e:
            self.logger.error(f"Failed to send email: {e}")
            return False
    
    def _is_configured(self) -> bool:
        """Check if email is properly configured"""
        return all([
            self.smtp_server,
            self.username,
            self.password,
            self.notification_email
        ])
    
    def test_email(self) -> bool:
        """Test email configuration"""
        if not self._is_configured():
            self.logger.error("Email not properly configured")
            return False
        
        try:
            subject = "ü§ñ Engine Deals AI - Test Email"
            body = """
            <html>
            <body>
                <h2>Test Email Successful!</h2>
                <p>Your Engine Deals AI email notifications are working correctly.</p>
                <p>You'll receive alerts here when hot deals are found.</p>
            </body>
            </html>
            """
            
            return self._send_email(subject, body)
            
        except Exception as e:
            self.logger.error(f"Email test failed: {e}")
            return False
